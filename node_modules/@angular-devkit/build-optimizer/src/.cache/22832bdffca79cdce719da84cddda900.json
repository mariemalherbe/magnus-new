{"remainingRequest":"/Users/mariemalherbe/Desktop/magnus-new/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/mariemalherbe/Desktop/magnus-new/node_modules/@ngu/carousel/src/ngu-carousel/ngu-carousel.component.js","dependencies":[{"path":"/Users/mariemalherbe/Desktop/magnus-new/node_modules/@ngu/carousel/src/ngu-carousel/ngu-carousel.component.js","mtime":1520164084000},{"path":"/Users/mariemalherbe/Desktop/magnus-new/node_modules/cache-loader/dist/cjs.js","mtime":1525687396310},{"path":"/Users/mariemalherbe/Desktop/magnus-new/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { NguCarouselItemDirective, NguCarouselNextDirective, NguCarouselPrevDirective } from './../ngu-carousel.directive';\nimport { Component, ElementRef, Renderer2, Input, Output, EventEmitter, ContentChildren, ViewChild, ContentChild, ViewChildren, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NguCarouselService } from './../ngu-carousel.service';\nvar NguCarouselComponent = /*@__PURE__*/ (function () {\n    function NguCarouselComponent(el, renderer, carouselSer, platformId) {\n        this.el = el;\n        this.renderer = renderer;\n        this.carouselSer = carouselSer;\n        this.platformId = platformId;\n        this.carouselLoad = new EventEmitter();\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMove = new EventEmitter();\n        this.initData = new EventEmitter();\n        this.pauseCarousel = false;\n        this.Arr1 = Array;\n        this.pointNumbers = [];\n        this.data = {\n            type: 'fixed',\n            token: '',\n            deviceType: 'lg',\n            items: 0,\n            load: 0,\n            deviceWidth: 0,\n            carouselWidth: 0,\n            itemWidth: 0,\n            visibleItems: { start: 0, end: 0 },\n            slideItems: 0,\n            itemWidthPer: 0,\n            itemLength: 0,\n            currentSlide: 0,\n            easing: 'cubic-bezier(0, 0, 0.2, 1)',\n            speed: 400,\n            transform: { xs: 0, sm: 0, md: 0, lg: 0, all: 0 },\n            loop: false,\n            dexVal: 0,\n            touchTransform: 0,\n            touch: { active: false, swipe: '', velocity: 0 },\n            isEnd: false,\n            isFirst: true,\n            isLast: false,\n            RTL: false,\n            button: { visibility: 'disabled' },\n            point: true,\n            vertical: { enabled: false, height: 400 }\n        };\n    }\n    NguCarouselComponent.prototype.ngOnChanges = function (changes) { };\n    NguCarouselComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.carousel = this.el.nativeElement;\n        this.carouselMain = this.carouselMain1.nativeElement;\n        this.carouselInner = this.carouselInner1.nativeElement;\n        this.rightBtn = this.next.nativeElement;\n        this.leftBtn = this.prev.nativeElement;\n        this.data.type = this.userData.grid.all !== 0 ? 'fixed' : 'responsive';\n        this.data.loop = this.userData.loop || false;\n        this.userData.easing = this.userData.easing || 'cubic-bezier(0, 0, 0.2, 1)';\n        this.data.touch.active = this.userData.touch || false;\n        this.data.RTL = this.userData.RTL ? true : false;\n        if (this.userData.vertical && this.userData.vertical.enabled) {\n            this.data.vertical.enabled = this.userData.vertical.enabled;\n            this.data.vertical.height = this.userData.vertical.height;\n        }\n        this.directionSym = this.data.RTL ? '' : '-';\n        this.data.point =\n            this.userData.point && typeof this.userData.point.visible !== 'undefined'\n                ? this.userData.point.visible\n                : true;\n        this.withAnim = true;\n        this.carouselSize();\n        // const datas = this.itemsElements.first.nativeElement.getBoundingClientRect().width;\n        this.carouselSerSub = this.carouselSer.getData.subscribe(function (res) {\n            if (res.id === _this.data.token) {\n                if (res.ref === 'moveToSlide') {\n                    if (_this.pointers !== res.index && res.index < _this.pointIndex) {\n                        _this.withAnim = res.animation === false ? false : true;\n                        _this.moveTo(res.index);\n                    }\n                }\n                else if (res.ref === 'reset') {\n                    if (_this.pointers !== 0 && 0 < _this.pointIndex) {\n                        _this.withAnim = false;\n                        _this.reset();\n                    }\n                }\n            }\n        });\n    };\n    NguCarouselComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.listener1 = this.renderer.listen(this.leftBtn, 'click', function () {\n            return _this.carouselScrollOne(0);\n        });\n        this.listener2 = this.renderer.listen(this.rightBtn, 'click', function () {\n            return _this.carouselScrollOne(1);\n        });\n        this.carouselCssNode = this.createStyleElem();\n        this.storeCarouselData();\n        this.buttonControl();\n        if (isPlatformBrowser(this.platformId)) {\n            this.carouselInterval();\n            this.onWindowScrolling();\n            if (!this.data.vertical.enabled) {\n                this.touch();\n            }\n            this.listener3 = this.renderer.listen('window', 'resize', function (event) {\n                _this.onResizing(event);\n            });\n        }\n        this.items.changes.subscribe(function (val) {\n            _this.data.isLast = false;\n            _this.carouselPoint();\n            _this.buttonControl();\n        });\n    };\n    NguCarouselComponent.prototype.ngAfterViewInit = function () {\n        if (this.userData.point.pointStyles) {\n            var datas = this.userData.point.pointStyles.replace(/.ngucarouselPoint/g, \".\" + this.data.token + \" .ngucarouselPoint\");\n            this.createStyleElem(datas);\n        }\n        else if (this.userData.point && this.userData.point.visible) {\n            this.renderer.addClass(this.pointMain.nativeElement, 'ngucarouselPointDefault');\n        }\n    };\n    NguCarouselComponent.prototype.ngOnDestroy = function () {\n        clearInterval(this.carouselInt);\n        // tslint:disable-next-line:no-unused-expression\n        this.itemsSubscribe && this.itemsSubscribe.unsubscribe();\n        this.carouselSerSub && this.carouselSerSub.unsubscribe();\n        this.carouselLoad.complete();\n        // remove listeners\n        for (var i = 1; i <= 8; i++) {\n            // tslint:disable-next-line:no-eval\n            eval(\"this.listener\" + i + \" && this.listener\" + i + \"()\");\n        }\n    };\n    NguCarouselComponent.prototype.onResizing = function (event) {\n        var _this = this;\n        clearTimeout(this.onResize);\n        this.onResize = setTimeout(function () {\n            if (_this.data.deviceWidth !== event.target.outerWidth) {\n                _this.setStyle(_this.carouselInner, 'transition', \"\");\n                _this.storeCarouselData();\n            }\n        }, 500);\n    };\n    /** Get Touch input */\n    NguCarouselComponent.prototype.touch = function () {\n        var _this = this;\n        if (this.userData.touch) {\n            var hammertime = new Hammer(this.carouselInner);\n            hammertime.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n            hammertime.on('panstart', function (ev) {\n                _this.data.carouselWidth = _this.carouselInner.offsetWidth;\n                _this.data.touchTransform = _this.data.transform[_this.data.deviceType];\n                _this.data.dexVal = 0;\n                _this.setStyle(_this.carouselInner, 'transition', '');\n            });\n            if (this.data.vertical.enabled) {\n                hammertime.on('panup', function (ev) {\n                    _this.touchHandling('panleft', ev);\n                });\n                hammertime.on('pandown', function (ev) {\n                    _this.touchHandling('panright', ev);\n                });\n            }\n            else {\n                hammertime.on('panleft', function (ev) {\n                    _this.touchHandling('panleft', ev);\n                });\n                hammertime.on('panright', function (ev) {\n                    _this.touchHandling('panright', ev);\n                });\n            }\n            hammertime.on('panend', function (ev) {\n                if (Math.abs(ev.velocity) > 1) {\n                    _this.data.touch.velocity = ev.velocity;\n                    var direc = 0;\n                    if (!_this.data.RTL) {\n                        direc = _this.data.touch.swipe === 'panright' ? 0 : 1;\n                    }\n                    else {\n                        direc = _this.data.touch.swipe === 'panright' ? 1 : 0;\n                    }\n                    _this.carouselScrollOne(direc);\n                }\n                else {\n                    _this.data.dexVal = 0;\n                    _this.setStyle(_this.carouselInner, 'transition', 'transform 324ms cubic-bezier(0, 0, 0.2, 1)');\n                    _this.setStyle(_this.carouselInner, 'transform', '');\n                }\n            });\n            hammertime.on('hammer.input', function (ev) {\n                // allow nested touch events to no propagate, this may have other side affects but works for now.\n                // TODO: It is probably better to check the source element of the event and only apply the handle to the correct carousel\n                ev.srcEvent.stopPropagation();\n            });\n        }\n    };\n    /** handle touch input */\n    NguCarouselComponent.prototype.touchHandling = function (e, ev) {\n        // vertical touch events seem to cause to panstart event with an odd delta\n        // and a center of {x:0,y:0} so this will ignore them\n        if (ev.center.x === 0) {\n            return;\n        }\n        ev = Math.abs(this.data.vertical.enabled ? ev.deltaY : ev.deltaX);\n        var valt = ev - this.data.dexVal;\n        valt =\n            this.data.type === 'responsive'\n                ? Math.abs(ev - this.data.dexVal) /\n                    (this.data.vertical.enabled\n                        ? this.data.vertical.height\n                        : this.data.carouselWidth) *\n                    100\n                : valt;\n        this.data.dexVal = ev;\n        this.data.touch.swipe = e;\n        if (!this.data.RTL) {\n            this.data.touchTransform =\n                e === 'panleft'\n                    ? valt + this.data.touchTransform\n                    : this.data.touchTransform - valt;\n        }\n        else {\n            this.data.touchTransform =\n                e === 'panright'\n                    ? valt + this.data.touchTransform\n                    : this.data.touchTransform - valt;\n        }\n        if (this.data.touchTransform > 0) {\n            if (this.data.type === 'responsive') {\n                this.setStyle(this.carouselInner, 'transform', this.data.vertical.enabled\n                    ? \"translate3d(0, \" + this.directionSym + this.data.touchTransform + \"%, 0)\"\n                    : \"translate3d(\" + this.directionSym + this.data.touchTransform + \"%, 0, 0)\");\n            }\n            else {\n                this.setStyle(this.carouselInner, 'transform', this.data.vertical.enabled\n                    ? \"translate3d(0, \" + this.directionSym + this.data.touchTransform + \"px, 0)\"\n                    : \"translate3d(\" + this.directionSym + this.data.touchTransform + \"px, 0px, 0px)\");\n            }\n        }\n        else {\n            this.data.touchTransform = 0;\n        }\n    };\n    /** this used to disable the scroll when it is not on the display */\n    NguCarouselComponent.prototype.onWindowScrolling = function () {\n        var top = this.carousel.offsetTop;\n        var scrollY = window.scrollY;\n        var heightt = window.innerHeight;\n        var carouselHeight = this.carousel.offsetHeight;\n        if (top <= scrollY + heightt - carouselHeight / 4 &&\n            top + carouselHeight / 2 >= scrollY) {\n            this.carouselIntervalEvent(0);\n        }\n        else {\n            this.carouselIntervalEvent(1);\n        }\n    };\n    /** store data based on width of the screen for the carousel */\n    NguCarouselComponent.prototype.storeCarouselData = function () {\n        if (isPlatformBrowser(this.platformId)) {\n            this.data.deviceWidth = window.innerWidth;\n        }\n        else {\n            this.data.deviceWidth = 1200;\n        }\n        this.data.carouselWidth = this.carouselMain.offsetWidth;\n        if (this.data.type === 'responsive') {\n            this.data.deviceType =\n                this.data.deviceWidth >= 1200\n                    ? 'lg'\n                    : this.data.deviceWidth >= 992\n                        ? 'md'\n                        : this.data.deviceWidth >= 768 ? 'sm' : 'xs';\n            this.data.items = this.userData.grid[this.data.deviceType];\n            this.data.itemWidth = this.data.carouselWidth / this.data.items;\n        }\n        else {\n            this.data.items = Math.trunc(this.data.carouselWidth / this.userData.grid.all);\n            this.data.itemWidth = this.userData.grid.all;\n            this.data.deviceType = 'all';\n        }\n        this.data.slideItems = +(this.userData.slide < this.data.items\n            ? this.userData.slide\n            : this.data.items);\n        this.data.load =\n            this.userData.load >= this.data.slideItems\n                ? this.userData.load\n                : this.data.slideItems;\n        this.userData.speed =\n            this.userData.speed || this.userData.speed > -1\n                ? this.userData.speed\n                : 400;\n        this.initData.emit(this.data);\n        this.carouselPoint();\n    };\n    /** Used to reset the carousel */\n    NguCarouselComponent.prototype.reset = function () {\n        this.carouselCssNode.innerHTML = '';\n        this.moveTo(0);\n        this.carouselPoint();\n    };\n    /** Init carousel point */\n    NguCarouselComponent.prototype.carouselPoint = function () {\n        // if (this.userData.point.visible === true) {\n        var Nos = this.items.length - (this.data.items - this.data.slideItems);\n        this.pointIndex = Math.ceil(Nos / this.data.slideItems);\n        var pointers = [];\n        if (this.pointIndex > 1 || !this.userData.point.hideOnSingleSlide) {\n            for (var i = 0; i < this.pointIndex; i++) {\n                pointers.push(i);\n            }\n        }\n        this.pointNumbers = pointers;\n        this.carouselPointActiver();\n        if (this.pointIndex <= 1) {\n            this.btnBoolean(1, 1);\n        }\n        else {\n            if (this.data.currentSlide === 0 && !this.data.loop) {\n                this.btnBoolean(1, 0);\n            }\n            else {\n                this.btnBoolean(0, 0);\n            }\n        }\n        this.buttonControl();\n        // }\n    };\n    /** change the active point in carousel */\n    NguCarouselComponent.prototype.carouselPointActiver = function () {\n        var i = Math.ceil(this.data.currentSlide / this.data.slideItems);\n        this.pointers = i;\n    };\n    /** this function is used to scoll the carousel when point is clicked */\n    NguCarouselComponent.prototype.moveTo = function (index) {\n        if (this.pointers !== index && index < this.pointIndex) {\n            var slideremains = 0;\n            var btns = this.data.currentSlide < index ? 1 : 0;\n            if (index === 0) {\n                this.btnBoolean(1, 0);\n                slideremains = index * this.data.slideItems;\n            }\n            else if (index === this.pointIndex - 1) {\n                this.btnBoolean(0, 1);\n                slideremains = this.items.length - this.data.items;\n            }\n            else {\n                this.btnBoolean(0, 0);\n                slideremains = index * this.data.slideItems;\n            }\n            this.carouselScrollTwo(btns, slideremains, this.data.speed);\n        }\n    };\n    /** set the style of the carousel based the inputs data */\n    NguCarouselComponent.prototype.carouselSize = function () {\n        this.data.token = this.generateID();\n        var dism = '';\n        this.styleSelector = \".\" + this.data.token + \" > .ngucarousel > .ngucarousel-inner > .ngucarousel-items\";\n        if (this.userData.custom === 'banner') {\n            this.renderer.addClass(this.carousel, 'banner');\n        }\n        if (this.userData.animation === 'lazy') {\n            dism += this.styleSelector + \" > .item {transition: transform .6s ease;}\";\n        }\n        var itemStyle = '';\n        if (this.data.vertical.enabled) {\n            var itemWidth_xs = this.styleSelector + \" > .item {height: \" + this.data\n                .vertical.height / +this.userData.grid.xs + \"px}\";\n            var itemWidth_sm = this.styleSelector + \" > .item {height: \" + this.data\n                .vertical.height / +this.userData.grid.sm + \"px}\";\n            var itemWidth_md = this.styleSelector + \" > .item {height: \" + this.data\n                .vertical.height / +this.userData.grid.md + \"px}\";\n            var itemWidth_lg = this.styleSelector + \" > .item {height: \" + this.data\n                .vertical.height / +this.userData.grid.lg + \"px}\";\n            itemStyle = \"@media (max-width:767px){\" + itemWidth_xs + \"}\\n                    @media (min-width:768px){\" + itemWidth_sm + \"}\\n                    @media (min-width:992px){\" + itemWidth_md + \"}\\n                    @media (min-width:1200px){\" + itemWidth_lg + \"}\";\n        }\n        else if (this.data.type === 'responsive') {\n            var itemWidth_xs = this.userData.type === 'mobile'\n                ? this.styleSelector + \" .item {flex: 0 0 \" + 95 /\n                    +this.userData.grid.xs + \"%}\"\n                : this.styleSelector + \" .item {flex: 0 0 \" + 100 /\n                    +this.userData.grid.xs + \"%}\";\n            var itemWidth_sm = this.styleSelector + \" > .item {flex: 0 0 \" + 100 /\n                +this.userData.grid.sm + \"%}\";\n            var itemWidth_md = this.styleSelector + \" > .item {flex: 0 0 \" + 100 /\n                +this.userData.grid.md + \"%}\";\n            var itemWidth_lg = this.styleSelector + \" > .item {flex: 0 0 \" + 100 /\n                +this.userData.grid.lg + \"%}\";\n            itemStyle = \"@media (max-width:767px){\" + itemWidth_xs + \"}\\n                    @media (min-width:768px){\" + itemWidth_sm + \"}\\n                    @media (min-width:992px){\" + itemWidth_md + \"}\\n                    @media (min-width:1200px){\" + itemWidth_lg + \"}\";\n        }\n        else {\n            itemStyle = this.styleSelector + \" .item {flex: 0 0 \" + this.userData.grid.all + \"px}\";\n        }\n        this.renderer.addClass(this.carousel, this.data.token);\n        if (this.data.vertical.enabled) {\n            this.renderer.addClass(this.carouselInner, 'nguvertical');\n            this.renderer.setStyle(this.forTouch.nativeElement, 'height', this.data.vertical.height + \"px\");\n        }\n        // tslint:disable-next-line:no-unused-expression\n        this.data.RTL &&\n            !this.data.vertical.enabled &&\n            this.renderer.addClass(this.carousel, 'ngurtl');\n        this.createStyleElem(dism + \" \" + itemStyle);\n    };\n    /** logic to scroll the carousel step 1 */\n    NguCarouselComponent.prototype.carouselScrollOne = function (Btn) {\n        var itemSpeed = this.data.speed;\n        var translateXval, currentSlide = 0;\n        var touchMove = Math.ceil(this.data.dexVal / this.data.itemWidth);\n        this.setStyle(this.carouselInner, 'transform', '');\n        if (this.pointIndex === 1) {\n            return;\n        }\n        else if (Btn === 0 &&\n            ((!this.data.loop && !this.data.isFirst) || this.data.loop)) {\n            var slide = this.data.slideItems * this.pointIndex;\n            var currentSlideD = this.data.currentSlide - this.data.slideItems;\n            var MoveSlide = currentSlideD + this.data.slideItems;\n            this.btnBoolean(0, 1);\n            if (this.data.currentSlide === 0) {\n                currentSlide = this.items.length - this.data.items;\n                itemSpeed = 400;\n                this.btnBoolean(0, 1);\n            }\n            else if (this.data.slideItems >= MoveSlide) {\n                currentSlide = translateXval = 0;\n                this.btnBoolean(1, 0);\n            }\n            else {\n                this.btnBoolean(0, 0);\n                if (touchMove > this.data.slideItems) {\n                    currentSlide = this.data.currentSlide - touchMove;\n                    itemSpeed = 200;\n                }\n                else {\n                    currentSlide = this.data.currentSlide - this.data.slideItems;\n                }\n            }\n            this.carouselScrollTwo(Btn, currentSlide, itemSpeed);\n        }\n        else if (Btn === 1 &&\n            ((!this.data.loop && !this.data.isLast) || this.data.loop)) {\n            if (this.items.length <=\n                this.data.currentSlide + this.data.items + this.data.slideItems &&\n                !this.data.isLast) {\n                currentSlide = this.items.length - this.data.items;\n                this.btnBoolean(0, 1);\n            }\n            else if (this.data.isLast) {\n                currentSlide = translateXval = 0;\n                itemSpeed = 400;\n                this.btnBoolean(1, 0);\n            }\n            else {\n                this.btnBoolean(0, 0);\n                if (touchMove > this.data.slideItems) {\n                    currentSlide =\n                        this.data.currentSlide +\n                            this.data.slideItems +\n                            (touchMove - this.data.slideItems);\n                    itemSpeed = 200;\n                }\n                else {\n                    currentSlide = this.data.currentSlide + this.data.slideItems;\n                }\n            }\n            this.carouselScrollTwo(Btn, currentSlide, itemSpeed);\n        }\n        // cubic-bezier(0.15, 1.04, 0.54, 1.13)\n    };\n    /** logic to scroll the carousel step 2 */\n    NguCarouselComponent.prototype.carouselScrollTwo = function (Btn, currentSlide, itemSpeed) {\n        if (this.data.dexVal !== 0) {\n            var val = Math.abs(this.data.touch.velocity);\n            var somt = Math.floor(this.data.dexVal /\n                val /\n                this.data.dexVal *\n                (this.data.deviceWidth - this.data.dexVal));\n            somt = somt > itemSpeed ? itemSpeed : somt;\n            itemSpeed = somt < 200 ? 200 : somt;\n            this.data.dexVal = 0;\n        }\n        if (this.withAnim) {\n            this.setStyle(this.carouselInner, 'transition', \"transform \" + itemSpeed + \"ms \" + this.userData.easing);\n            this.userData.animation &&\n                this.carouselAnimator(Btn, currentSlide + 1, currentSlide + this.data.items, itemSpeed, Math.abs(this.data.currentSlide - currentSlide));\n        }\n        else {\n            this.setStyle(this.carouselInner, 'transition', \"\");\n        }\n        this.data.itemLength = this.items.length;\n        this.transformStyle(currentSlide);\n        this.data.currentSlide = currentSlide;\n        this.onMove.emit(this.data);\n        this.carouselPointActiver();\n        this.carouselLoadTrigger();\n        this.buttonControl();\n        this.withAnim = true;\n    };\n    /** boolean function for making isFirst and isLast */\n    NguCarouselComponent.prototype.btnBoolean = function (first, last) {\n        this.data.isFirst = first ? true : false;\n        this.data.isLast = last ? true : false;\n    };\n    NguCarouselComponent.prototype.transformString = function (grid, slide) {\n        var collect = '';\n        collect += this.styleSelector + \" { transform: translate3d(\";\n        if (this.data.vertical.enabled) {\n            this.data.transform[grid] =\n                this.data.vertical.height / this.userData.grid[grid] * slide;\n            collect += \"0, -\" + this.data.transform[grid] + \"px, 0\";\n        }\n        else {\n            this.data.transform[grid] = 100 / this.userData.grid[grid] * slide;\n            collect += \"\" + this.directionSym + this.data.transform[grid] + \"%, 0, 0\";\n        }\n        collect += \"); }\";\n        return collect;\n    };\n    /** set the transform style to scroll the carousel  */\n    NguCarouselComponent.prototype.transformStyle = function (slide) {\n        var slideCss = '';\n        if (this.data.type === 'responsive') {\n            slideCss = \"@media (max-width: 767px) {\" + this.transformString('xs', slide) + \"}\\n      @media (min-width: 768px) {\" + this.transformString('sm', slide) + \" }\\n      @media (min-width: 992px) {\" + this.transformString('md', slide) + \" }\\n      @media (min-width: 1200px) {\" + this.transformString('lg', slide) + \" }\";\n        }\n        else {\n            this.data.transform.all = this.userData.grid.all * slide;\n            slideCss = this.styleSelector + \" { transform: translate3d(\" + this.directionSym + this.data.transform.all + \"px, 0, 0);\";\n        }\n        this.carouselCssNode.innerHTML = slideCss;\n    };\n    /** this will trigger the carousel to load the items */\n    NguCarouselComponent.prototype.carouselLoadTrigger = function () {\n        if (typeof this.userData.load === 'number') {\n            // tslint:disable-next-line:no-unused-expression\n            this.items.length - this.data.load <=\n                this.data.currentSlide + this.data.items &&\n                this.carouselLoad.emit(this.data.currentSlide);\n        }\n    };\n    /** generate Class for each carousel to set specific style */\n    NguCarouselComponent.prototype.generateID = function () {\n        var text = '';\n        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for (var i = 0; i < 6; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return \"ngucarousel\" + text;\n    };\n    /** handle the auto slide */\n    NguCarouselComponent.prototype.carouselInterval = function () {\n        var _this = this;\n        if (typeof this.userData.interval === 'number' && this.data.loop) {\n            this.listener4 = this.renderer.listen(this.carouselMain, 'touchstart', function () {\n                _this.carouselIntervalEvent(1);\n            });\n            this.listener5 = this.renderer.listen(this.carouselMain, 'touchend', function () {\n                _this.carouselIntervalEvent(0);\n            });\n            this.listener6 = this.renderer.listen(this.carouselMain, 'mouseenter', function () {\n                _this.carouselIntervalEvent(1);\n            });\n            this.listener7 = this.renderer.listen(this.carouselMain, 'mouseleave', function () {\n                _this.carouselIntervalEvent(0);\n            });\n            this.listener8 = this.renderer.listen('window', 'scroll', function () {\n                clearTimeout(_this.onScrolling);\n                _this.onScrolling = setTimeout(function () {\n                    _this.onWindowScrolling();\n                }, 600);\n            });\n            this.carouselInt = setInterval(function () {\n                // tslint:disable-next-line:no-unused-expression\n                !_this.pauseCarousel && _this.carouselScrollOne(1);\n            }, this.userData.interval);\n        }\n    };\n    /** pause interval for specific time */\n    NguCarouselComponent.prototype.carouselIntervalEvent = function (ev) {\n        var _this = this;\n        this.evtValue = ev;\n        if (this.evtValue === 0) {\n            clearTimeout(this.pauseInterval);\n            this.pauseInterval = setTimeout(function () {\n                // tslint:disable-next-line:no-unused-expression\n                _this.evtValue === 0 && (_this.pauseCarousel = false);\n            }, this.userData.interval);\n        }\n        else {\n            this.pauseCarousel = true;\n        }\n    };\n    /** animate the carousel items */\n    NguCarouselComponent.prototype.carouselAnimator = function (direction, start, end, speed, length) {\n        var _this = this;\n        var val = length < 5 ? length : 5;\n        val = val === 1 ? 3 : val;\n        var itemList = this.items.toArray();\n        if (direction === 1) {\n            for (var i = start - 1; i < end; i++) {\n                val = val * 2;\n                itemList[i] &&\n                    this.setStyle(itemList[i].nativeElement, 'transform', \"translate3d(\" + val + \"px, 0, 0)\");\n            }\n        }\n        else {\n            for (var i = end - 1; i >= start - 1; i--) {\n                val = val * 2;\n                itemList[i] &&\n                    this.setStyle(itemList[i].nativeElement, 'transform', \"translate3d(-\" + val + \"px, 0, 0)\");\n            }\n        }\n        setTimeout(function () {\n            _this.items.forEach(function (elem) {\n                return _this.setStyle(elem.nativeElement, 'transform', \"translate3d(0, 0, 0)\");\n            });\n        }, speed * 0.7);\n    };\n    /** control button for loop */\n    NguCarouselComponent.prototype.buttonControl = function () {\n        var arr = [];\n        if (!this.data.loop || (this.data.isFirst && this.data.isLast)) {\n            arr = [\n                this.data.isFirst ? 'none' : 'block',\n                this.data.isLast ? 'none' : 'block'\n            ];\n        }\n        else {\n            arr = ['block', 'block'];\n        }\n        this.setStyle(this.leftBtn, 'display', arr[0]);\n        this.setStyle(this.rightBtn, 'display', arr[1]);\n    };\n    /** Short form for setElementStyle */\n    NguCarouselComponent.prototype.setStyle = function (el, prop, val) {\n        this.renderer.setStyle(el, prop, val);\n    };\n    /** For generating style tag */\n    NguCarouselComponent.prototype.createStyleElem = function (datas) {\n        var styleItem = this.renderer.createElement('style');\n        if (datas) {\n            var styleText = this.renderer.createText(datas);\n            this.renderer.appendChild(styleItem, styleText);\n        }\n        this.renderer.appendChild(this.carousel, styleItem);\n        return styleItem;\n    };\n    return NguCarouselComponent;\n}());\nexport { NguCarouselComponent };\n//# sourceMappingURL=ngu-carousel.component.js.map\n",null]}